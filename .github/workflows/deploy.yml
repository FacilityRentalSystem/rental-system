# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ APPLICATION_YML }}" > ./application.yml
        shell: bash

        # 환경별 yml 파일 생성 - dev
      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ APPLICATION_PROD }}" > ./application-prod.yml
        shell: bash

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/actions/setup-gradle@3.1.0 # v3.1.0
        with:
          arguments: clean bootJar

      - name: Build Docker Image
        run: |
          docker build -t my-application:latest .

      # 4. aws 자격 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # ecr에 로그인
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: dding-gi/repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag my-application:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Logout from Amazon ECR
        run: docker logout ${{ steps.ecr-login.outputs.registry }}

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정
  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:

      # 1. 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker stop rental-container 2>/dev/null || true

      # 2. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f

      # 3. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dding-gi-rental:latest

      # 4. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: sudo docker run --name rental-container --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/dding-gi-rental:latest

